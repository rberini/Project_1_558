---
title: "ST 558 Project One"
author: "Robert Berini & Robert Ferrand"
format: html
editor: visual
---

## Project Overview

Query the Public Use Microdata Sample (PUMS) Census API. Creates a function that allows the user to call the API with different combinations of variables. Provides numerical and graphical summaries.Our goal is to write functions that will manipulate and process data sets that come from a census API. We’ll create generic functions to automatically summarize and plot certain returned data. Lastly, we’ll write up a document via quarto to describe our thought process and give examples of using the functions.

## Required Packages

Load required packages for project

```{r setup, message=FALSE, warning=FALSE}
library(tidyverse)
library(httr)
library(jsonlite)
library(tidycensus)
library(janitor)
library(quantreg)
```

## Data Processing

some placeholder text

### Build API

Creating median time table for JWAP and JWDP

*Note to Robbie: I'm not actually using this in the function yet. Just trying to figure out how to calculate the median time per range and retain the factor code. We'll have to build this within the main function and write a lookup and replace routine*


JWDP
```{r}
URL_time <- "https://api.census.gov/data/2022/acs/acs1/pums/variables/JWDP.json"
jwdp_data <- GET(URL_time)

jwdp_time_data_2 <- fromJSON(rawToChar(jwdp_data$content))
jwdp_time_data_3 <- as_tibble(jwdp_time_data_2$values$item)
jwdp_time_table <- pivot_longer(jwdp_time_data_3,
                         cols = 1:ncol(jwdp_time_data_3),
                         names_to = "code",
                         values_to = "range") |>
  filter(code != 0) |>
  separate_wider_delim(range, delim = " ", names = c("time1", "AMPM1", "to", "time2", "AMPM2")) 

jwdp_time_table <- jwdp_time_table |>
  mutate(median_time = hms::as_hms(
    hms::parse_hm(jwdp_time_table$time1) +
      ((hms::parse_hm(jwdp_time_table$time2) - hms::parse_hm(jwdp_time_table$time1)) / 2))) |>
  select(code, median_time, everything()) |>
    arrange(code)

jwdp_time_table$code <- as.numeric(jwdp_time_table$code)

jwdp_time_table
```
JWAP
```{r}
URL_time_2 <- "https://api.census.gov/data/2022/acs/acs1/pums/variables/JWAP.json"
jwap_data <- GET(URL_time_2)

jwap_time_data_2 <- fromJSON(rawToChar(jwap_data$content))
jwap_time_data_3 <- as_tibble(jwap_time_data_2$values$item)
jwap_time_table <- pivot_longer(jwap_time_data_3,
                         cols = 1:ncol(jwap_time_data_3),
                         names_to = "code",
                         values_to = "range") |>
  filter(code != 0) |>
  separate_wider_delim(range, delim = " ", names = c("time1", "AMPM1", "to", "time2", "AMPM2")) 

jwap_time_table <- jwap_time_table |>
  mutate(median_time = hms::as_hms(
    hms::parse_hm(jwap_time_table$time1) +
      ((hms::parse_hm(jwap_time_table$time2) - hms::parse_hm(jwap_time_table$time1)) / 2))) |>
  select(code, median_time, everything()) |>
  arrange(code)

jwap_time_table$code <- as.numeric(jwap_time_table$code)

jwap_time_table
```


Creating the API function

```{r}

surv_year <- c(2010:2022)
valid_num_var <- c("AGEP", "GASP", "GRPIP", "JWAP", "JWDP", "JWMNP")
valid_date_var <- c("JWAP", "JWDP")
valid_cat_var <- c("FER", "HHL", "HISPEED", "JWTRNS", "SCH", "SCHL", "SEX")
valid_geo_level <- c("All", "Region", "Division", "State")

api_query <- function(surv_year = "2022", num_var = "AGEP", cat_var = "SEX", geo_level = "All", condition = NULL) {
  if (surv_year < 2010 || surv_year > 2022) {
    stop("Year must be between 2010 and 2022.")
   }
  if (any(!num_var %in% valid_num_var)) {
    stop("Invalid Numeric Variable")
    }
  if (any(!cat_var %in% valid_cat_var)) {
    stop("Invalid Categorical Variable")
  }
  if (any(!geo_level %in% valid_geo_level)) {
    stop("Invalid Geography Level")
    }
  
  num_var_string <- paste(num_var, collapse = ",")
  print(num_var_string)
  cat_var_string <- paste(cat_var, collapse = ",")
  print(cat_var_string)
  URL_base <- "https://api.census.gov/data/"
  URL_id <- paste0(URL_base, surv_year, "/acs/acs1/pums?get=PWGTP,", num_var_string, ",", cat_var_string)
  
  if (!is.null(condition)) {
    condition_string <- paste(condition, collapse = "&")
    URL_id <- paste0(URL_id, "&", condition_string)
  }
  
  print(URL_id)
  
  
  #call API and create database
  
  census_info <- GET(URL_id)
  
  census_df <- fromJSON(rawToChar(census_info$content))
  
  census_tib <- census_df |>
    as_tibble() |>
    row_to_names(row_number = 1)
  
  census_tib$PWGTP <- as.numeric(census_tib$PWGTP)
  
  for (column in colnames(census_tib)) {
    if (column %in% valid_date_var) {
      census_tib[[column]] <- as.numeric(census_tib[[column]])
    } else if (column %in% valid_num_var) {
      census_tib[[column]] <- as.numeric(census_tib[[column]])
    } else if (column %in% valid_cat_var) {
      census_tib[[column]] <- as.factor(census_tib[[column]])
    }
  }
  
  # function for creating data should assign a class of census
  
  class(census_tib) <- c("census", class(census_tib))
  
  census_tib
}



#make it so that you can't print two of the same column name
#make it so that geography level does something, condition it?
#create a for loop to specify multiple data items
```

### Obtaining Person Level Records

The `PWGTP` variable actually represents the number of (people) observations there should be for a particular row.

### Test the API Function

Run various combinations of inputs (including default) to test function

```{r}
api_query()

```

```{r}
api_query(2016, num_var = c("GASP", "GRPIP"), "FER")
```


```{r}
api_query(2021, "GASP", "HHL")
```


## Writing a Generic Function for Summarizing

some placeholder text

### Numeric Summary

write a function that produces means and standard deviations for our numeric variable(s) and counts for our categorical variable(s).

```{r}
#| eval: false
#| echo: false

# switch above to true after completing code chunk

cen_summary <- function(tib, )

mean(census_tib[[numeric_select]])
```

Test out this function by running summary(*your_census_tibble*) on something you’ve returned from your census API function.

```{r}
#| eval: false
#| echo: false

# switch above to true after completing code chunk

mean(census_tib[[numeric_select]])
```

### Graphical Summary

Similarly, let’s create a generic `plot()` function for a census class tibble. Require the user to specify one categorical variable and one numeric variable for plotting purposes.

```{r}
#| eval: false
#| echo: false

# switch above to true after completing code chunk

census_plot <- function(tib = census_call$census_tib, num_var = census_call$num_var[1], cat_var = census_call$cat_var[1]) {
  ggplot(tib,
       aes(x = get(cat_var), y = get(num_var), weight = PWGTP)) +
    geom_boxplot()
}
```

Test `census_plot` function
```{r}
#| eval: false
#| echo: false

# switch above to true after completing code chunk

census_plot()
```

