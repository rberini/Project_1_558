[
  {
    "objectID": "project_1_558.html",
    "href": "project_1_558.html",
    "title": "ST 558 Project One",
    "section": "",
    "text": "Query the Public Use Microdata Sample (PUMS) Census API. Creates a function that allows the user to call the API with different combinations of variables. Provides numerical and graphical summaries."
  },
  {
    "objectID": "project_1_558.html#project-overview",
    "href": "project_1_558.html#project-overview",
    "title": "ST 558 Project One",
    "section": "",
    "text": "Query the Public Use Microdata Sample (PUMS) Census API. Creates a function that allows the user to call the API with different combinations of variables. Provides numerical and graphical summaries."
  },
  {
    "objectID": "project_1_558.html#required-packages",
    "href": "project_1_558.html#required-packages",
    "title": "ST 558 Project One",
    "section": "Required Packages",
    "text": "Required Packages\nLoad required packages for project\n\nlibrary(tidyverse)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(tidycensus)\nlibrary(janitor)\nlibrary(quantreg)"
  },
  {
    "objectID": "project_1_558.html#data-processing",
    "href": "project_1_558.html#data-processing",
    "title": "ST 558 Project One",
    "section": "Data Processing",
    "text": "Data Processing\nsome placeholder text\n\nBuild API\nv1 berini (outside of function)\nv2 ferrand\nv3 ferrand\nTHIS ONE WORKS\n\nsurv_year &lt;- c(2010:2022)\nvalid_num_var &lt;- c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\", \"PWGTP\")\nvalid_cat_var &lt;- c(\"FER\", \"HHL\", \"HISPEED\", \"JWAP\", \"JWDP\", \"JWTRNS\", \"SCH\", \"SCHL\", \"SEX\")\nvalid_geo_level &lt;- c(\"All\", \"Region\", \"Division\", \"State\")\n\napi_query &lt;- function(surv_year = \"2022\", num_var = c(\"AGEP\", \"PWGTP\"), cat_var = \"SEX\", geo_level = \"All\", condition = NULL)\n{\n   if (surv_year &lt; 2010 || surv_year &gt; 2022) {\n    stop(\"Year must be between 2010 and 2022.\")\n   }\n  if (any(!num_var %in% valid_num_var)) {\n    stop(\"Invalid Numeric Variable\")\n    }\n  if (any(!cat_var %in% valid_cat_var)) {\n        stop(\"Invalid Categorical Variable\")\n  }\n    if (any(!geo_level %in% valid_geo_level)) {\n        stop(\"Invalid Geography Level\")\n    }\n  \n  num_var_string &lt;- paste(num_var, collapse = \",\")\n  print(num_var_string)\n  cat_var_string &lt;- paste(cat_var, collapse = \",\")\n  print(cat_var_string)\n  URL_base &lt;- \"https://api.census.gov/data/\"\n  URL_id &lt;- paste0(URL_base, surv_year, \"/acs/acs1/pums?get=PWGTP,\", num_var_string, \",\", cat_var_string)\n  \n  if (!is.null(condition)) {\n    condition_string &lt;- paste(condition, collapse = \"&\")\n    URL_id &lt;- paste0(URL_id, \"&\", condition_string)\n  }\n  \n  #AS DATETIME, AS DATE, AS TIME\n  print(URL_id)\n  \n  census_df &lt;- fromJSON(URL_id)\n  \n  census_tib &lt;- census_df |&gt;\n    as_tibble() |&gt;\n    row_to_names(row_number = 1)\n  \n  \n  for (column in colnames(census_tib)) {\n    if (column %in% valid_num_var) {\n      census_tib[[column]] &lt;- as.numeric(census_tib[[column]])\n    } else if (column %in% valid_cat_var) {\n      census_tib[[column]] &lt;- as.factor(census_tib[[column]])\n    }\n  }\n  print(census_tib)\n}\n\n\n\n#make it so that you can't print two of the same column name\n#make it so that geography level does something, condition it?\n#create a for loop to specify multiple data items\n\n\n\nCreate Database\nsome placeholder text"
  },
  {
    "objectID": "project_1_558.html#obtaining-person-level-records",
    "href": "project_1_558.html#obtaining-person-level-records",
    "title": "ST 558 Project One",
    "section": "Obtaining Person Level Records",
    "text": "Obtaining Person Level Records\nsome placeholder text"
  },
  {
    "objectID": "project_1_558.html#writing-a-generic-function-for-summarizing",
    "href": "project_1_558.html#writing-a-generic-function-for-summarizing",
    "title": "ST 558 Project One",
    "section": "Writing a Generic Function for Summarizing",
    "text": "Writing a Generic Function for Summarizing\nsome placeholder text\n\nNumeric Summary\nwrite a function that produces means and standard deviations for our numeric variable(s) and counts for our categorical variable(s).\nTest out this function by running summary(your_census_tibble) on something you’ve returned from your census API function.\n\n\nGraphical Summary\nSimilarly, let’s create a generic plot() function for a census class tibble. Require the user to specify one categorical variable and one numeric variable for plotting purposes."
  }
]